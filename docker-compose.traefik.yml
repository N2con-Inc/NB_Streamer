
# NB_Streamer v0.3.0 - Traefik with Let's Encrypt Configuration
#
# This compose file includes Traefik as an in-cluster reverse proxy
# with automatic Let's Encrypt SSL certificate provisioning.
#
# ⚠️  NOT RECOMMENDED FOR THIS SERVER ⚠️
# This server already has an external reverse proxy in place.
# This file is provided for portability and other deployment environments.
#
# Usage (for other environments):
#   docker compose -f docker-compose.traefik.yml --env-file .env up -d

services:
  traefik:
    image: traefik:v3.1
    container_name: nb-streamer-traefik
    
    command:
      # Traefik configuration
      - --api.dashboard=false
      - --api.insecure=false
      - --log.level=${TRAEFIK_LOG_LEVEL:-INFO}
      
      # Entrypoints
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      
      # Redirect HTTP to HTTPS
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      
      # Docker provider
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=nb-streamer-web
      
      # Let's Encrypt configuration
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=${LE_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      
      # Security
      - --global.checknewversion=false
      - --global.sendanonymoususage=false
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    
    networks:
      - nb-streamer-web
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  nb-streamer:
    build:
      context: .
      dockerfile: Dockerfile
    image: nb-streamer:0.3.0
    container_name: nb-streamer-app
    
    environment:
      # Graylog Configuration (required)
      - NB_GRAYLOG_HOST=${NB_GRAYLOG_HOST}
      - NB_GRAYLOG_PORT=${NB_GRAYLOG_PORT:-12201}
      - NB_GRAYLOG_PROTOCOL=${NB_GRAYLOG_PROTOCOL:-udp}
      
      # Multi-tenancy Configuration
      - NB_TENANTS=${NB_TENANTS:-n2con}
      - NB_REQUIRE_TENANT_PATH=${NB_REQUIRE_TENANT_PATH:-true}
      - NB_ALLOW_LEGACY_EVENTS=${NB_ALLOW_LEGACY_EVENTS:-true}
      - NB_LEGACY_ENFORCE_MATCH=${NB_LEGACY_ENFORCE_MATCH:-true}
      - NB_TRUST_PROXY_HEADERS=${NB_TRUST_PROXY_HEADERS:-true}
      - NB_EXPOSE_TENANTS=${NB_EXPOSE_TENANTS:-false}
      
      # Authentication
      - NB_AUTH_TYPE=${NB_AUTH_TYPE:-bearer}
      - NB_AUTH_TOKEN=${NB_AUTH_TOKEN}
      - NB_AUTH_USERNAME=${NB_AUTH_USERNAME}
      - NB_AUTH_PASSWORD=${NB_AUTH_PASSWORD}
      - NB_AUTH_HEADER_NAME=${NB_AUTH_HEADER_NAME}
      - NB_AUTH_HEADER_VALUE=${NB_AUTH_HEADER_VALUE}
      
      # Service Configuration
      - NB_HOST=0.0.0.0
      - NB_PORT=8080
      - NB_LOG_LEVEL=${NB_LOG_LEVEL:-info}
      - NB_DEBUG=${NB_DEBUG:-false}
      
      # Message Configuration
      - NB_COMPRESSION_ENABLED=${NB_COMPRESSION_ENABLED:-true}
      - NB_MAX_MESSAGE_SIZE=${NB_MAX_MESSAGE_SIZE:-8192}
      
      # Legacy compatibility
      - NB_TENANT_ID=${NB_TENANT_ID:-}
    
    labels:
      # Enable Traefik
      - "traefik.enable=true"
      - "traefik.docker.network=nb-streamer-web"
      
      # HTTP Router (redirects to HTTPS)
      - "traefik.http.routers.nb-streamer.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.nb-streamer.entrypoints=web"
      
      # HTTPS Router
      - "traefik.http.routers.nb-streamer-secure.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.nb-streamer-secure.entrypoints=websecure"
      - "traefik.http.routers.nb-streamer-secure.tls=true"
      - "traefik.http.routers.nb-streamer-secure.tls.certresolver=letsencrypt"
      
      # Service configuration
      - "traefik.http.services.nb-streamer.loadbalancer.server.port=8080"
      
      # Health check
      - "traefik.http.services.nb-streamer.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.nb-streamer.loadbalancer.healthcheck.interval=10s"
      - "traefik.http.services.nb-streamer.loadbalancer.healthcheck.timeout=3s"
      
      # Security headers middleware
      - "traefik.http.routers.nb-streamer-secure.middlewares=security-headers"
      - "traefik.http.middlewares.security-headers.headers.frameDeny=true"
      - "traefik.http.middlewares.security-headers.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.security-headers.headers.browserXssFilter=true"
      - "traefik.http.middlewares.security-headers.headers.referrerPolicy=strict-origin-when-cross-origin"
      - "traefik.http.middlewares.security-headers.headers.customRequestHeaders.X-Forwarded-Proto=https"
    
    networks:
      - nb-streamer-web
    
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8080/health"]
      interval: 10s
      timeout: 2s
      retries: 6
      start_period: 20s
    
    restart: unless-stopped
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Security - run as non-root user
    user: "1000:100"
    
    depends_on:
      traefik:
        condition: service_healthy

networks:
  nb-streamer-web:
    driver: bridge
    name: nb-streamer-web

# Required setup for Let's Encrypt:
#
# 1. Create acme.json file with proper permissions:
#    mkdir -p letsencrypt
#    touch letsencrypt/acme.json
#    chmod 600 letsencrypt/acme.json
#
# 2. Set environment variables in .env:
#    DOMAIN=your-domain.com
#    LE_EMAIL=your-email@example.com
#    NB_GRAYLOG_HOST=your-graylog-host
#    NB_TENANTS=tenant1,tenant2
#
# 3. Ensure DNS points to your server:
#    your-domain.com -> your-server-ip
#
# 4. Deploy:
#    docker compose -f docker-compose.traefik.yml --env-file .env up -d
#
# 5. Test endpoints:
#    https://your-domain.com/health
#    https://your-domain.com/tenant1/events (with auth)
#
# ⚠️  IMPORTANT NOTES FOR THIS SERVER:
# - This configuration is NOT recommended for this deployment
# - An external reverse proxy is already in place
# - Use docker-compose.external-proxy.yml instead
# - This file is provided for reference and other environments only
