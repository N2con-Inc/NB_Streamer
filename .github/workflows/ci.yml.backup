name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt

    - name: Lint with flake8
      run: |
        source venv/bin/activate
        flake8 src tests --max-line-length=88 --extend-ignore=E203,W503

    - name: Format check with black
      run: |
        source venv/bin/activate
        black --check --diff src tests

    - name: Import sort check with isort
      run: |
        source venv/bin/activate
        isort --check-only --diff src tests

  type-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt

    - name: Type check with mypy
      run: |
        source venv/bin/activate
        mypy src

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt

    - name: Run unit tests
      run: |
        source venv/bin/activate
        pytest tests/unit -v --cov=src --cov-report=xml --cov-report=term-missing

    - name: Run integration tests
      run: |
        source venv/bin/activate
        pytest tests/integration -v

    - name: Run E2E tests
      run: |
        source venv/bin/activate
        pytest tests/e2e -v

    - name: Upload coverage reports to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  docker:
    runs-on: ubuntu-latest
    needs: [lint, type-check, test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: nb_streamer:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm -d -p 8080:8080 --name test_container nb_streamer:latest
        sleep 10
        curl -f http://localhost:8080/health || exit 1
        docker stop test_container
